{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","loaded","articles","search","select","getArticles","bind","receiveArticles","fetchArticles","handleChange","updateSelect","e","setState","target","value","arr","i","length","first_article","second_article","div_1","key","className","style","urlToImage","title","replace","description","href","url","div_2","combined_div","push","this","$","ajax","then","article_className","type","seach","placeholder","onChange","name","id","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.53c58ec1.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport $ from 'jquery';\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {loaded: false, articles: [], search: '', select: ''};\n    this.getArticles = this.getArticles.bind(this);\n    this.receiveArticles = this.receiveArticles.bind(this);\n    this.fetchArticles = this.fetchArticles.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.updateSelect = this.updateSelect.bind(this);\n  \n  }\n\n\n\n  handleChange() {\n\n    return (e) => {\n        this.setState({ search: e.target.value })\n    }\n  }\n\n\n\n  receiveArticles(articles){\n    let arr = [];\n    let i = 0;\n    \n    while(i < articles.articles.length-1){\n      let first_article = articles.articles[i];\n      let second_article = articles.articles[i+1];\n    \n\n      // Regex removes any html elements in title or description\n      let div_1 = <div key={i} className='article-div'><div className = 'article-div-upper' style={{ 'backgroundImage': `url(${first_article.urlToImage})`}}></div><div className = 'article-div-lower'><h3 className='article-title'>{first_article.title.replace(/(<([^>]+)>)/ig, \"\")}</h3> <h4 className='article-desc'>{first_article.description.replace(/(<([^>]+)>)/ig, \"\")}</h4><a href={first_article.url} target=\"_blank\">Read More</a></div></div>\n      let div_2 = <div key={i+1} className='article-div'><div className = 'article-div-upper' style={{ 'backgroundImage': `url(${second_article.urlToImage})`}}></div><div className = 'article-div-lower'><h3 className='article-title'>{second_article.title.replace(/(<([^>]+)>)/ig, \"\")} </h3><h4 className='article-desc'>{second_article.description.replace(/(<([^>]+)>)/ig, \"\")}</h4><a href={second_article.url} target=\"_blank\">Read More</a></div></div>\n      let combined_div = <div className='combined-div'>{div_1}{div_2}</div>\n      arr.push(combined_div)\n      i += 2;\n\n    }\n\n\n    this.setState({articles: arr})\n  \n  }\n\n  getArticles(){\n    // If this is a generic search or a search for a specific topic\n    if(this.state.search.length){\n      // what is it sorted by\n      if(this.state.select.length){\n        return $.ajax({\n        \n          url: `https://newsapi.org/v2/everything?q=${this.state.search}&pageSize=10&sortBy=${this.state.select}&language=en&apiKey=e5040c51bda24558962c4af06ff1ee2b`\n        })\n      } else {\n        return $.ajax({\n        \n          url: `https://newsapi.org/v2/everything?q=${this.state.search}&language=en&pageSize=10&apiKey=e5040c51bda24558962c4af06ff1ee2b`\n        })\n      }\n      \n    } else {\n\n      if(this.state.select.length){\n        return $.ajax({\n        \n          url: `https://newsapi.org/v2/top-headlines?country=us&pageSize=10&sortBy=${this.state.select}&language=en&apiKey=e5040c51bda24558962c4af06ff1ee2b`\n        })\n      } else {\n        return $.ajax({\n        \n          url: 'https://newsapi.org/v2/top-headlines?language=en&pageSize=10&apiKey=e5040c51bda24558962c4af06ff1ee2b'\n        })\n      }\n      \n    }\n\n  }\n\n  fetchArticles(){\n    // get articles then take the articles and put them in local state\n    this.getArticles().then(articles => (this.receiveArticles(articles)))\n  }\n\n  updateSelect(e){\n    // update the sort by drop down\n    this.setState({select: e.target.value})\n  }\n\n\n  render(){\n    let article_className;\n   if(!this.state.articles.length){\n    article_className='';\n   } else {\n    article_className= 'articles-div';\n   }\n    return (\n      <div className=\"App\">\n        <h1>Patrick Brown News App</h1>\n        <h2>Read all about it</h2>\n        <div className='upper-body'>\n          <input type=\"text\" className='search-bar' value={this.state.seach} placeholder='search' onChange={this.handleChange()} />\n          <select onChange={this.updateSelect} name=\"sort-by\" value={this.state.select} id=\"sort-by\">\n            <option value=''>Sort By</option>\n            <option value=' '>None</option>\n            <option value=\"relevancy\">Relevance</option>\n            <option value=\"publishedAt\">Date</option>\n            <option value=\"popularity\">Popularity</option>\n          </select>\n          <button className='search-button' onClick={this.fetchArticles}>Submit</button>\n        </div>\n        <div className={article_className}>{this.state.articles}</div>\n        \n      </div>\n    );\n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}